/~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~/
DO $$
DECLARE
   counter integer := 1;
   first_name varchar(50) := 'John';
   last_name varchar(50) := 'Doe';
   payment numeric(11,2) := 20.5;
BEGIN
   RAISE NOTICE '% % % has been paid % USD', counter,
first_name, last_name, payment;
END $$;

CREATE OR REPLACE FUNCTION
myMultiplication(var1 integer, var2 integer) 
RETURNS integer AS $$
BEGIN
	return var1*var2;
END; $$ 
LANGUAGE plpgsql;

Execute 'myMultiplication' : SELECT myMultiplication(3,4);
/~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~/

/~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~/
CREATE OR REPLACE FUNCTION get_cities (r TEXT, iy INTEGER, city_pop INTEGER) 
 RETURNS TABLE (name TEXT, district TEXT, population INTEGER) AS $$
BEGIN
 RETURN QUERY 
SELECT city.name, city.district, city.population
 FROM country inner join city on (country.code=city.countrycode)
 WHERE country.region=r AND country.indepyear>=iy AND city.population>=city_pop;
 END; $$ 
LANGUAGE plpgsql;

Execute 'get_cities' : 
SELECT get_cities('Western Europe', 1500, 1000);
SELECT * FROM get_cities('Western Europe', 1500, 1000);
/~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~/

/~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~/
DO $$
DECLARE
   a integer := 10;
   b integer := 10;
BEGIN 
  IF a > b THEN 
     RAISE NOTICE 'a is greater than b';
  ELSIF a < b THEN
     RAISE NOTICE 'a is less than b';
  ELSE
     RAISE NOTICE 'a is equal to b';
  END IF;
END $$;

CREATE OR REPLACE FUNCTION fibonacci (n INTEGER) 
 RETURNS INTEGER AS $$ 
DECLARE
   counter INTEGER := 0 ; 
   i INTEGER := 0 ; 
   j INTEGER := 1 ;
BEGIN
 IF (n < 1) THEN
 RETURN 0 ;
 END IF; 
 LOOP 
 EXIT WHEN counter = n ; 
 counter := counter + 1 ; 
 SELECT j, i + j INTO i, j ;
 END LOOP ; 
 RETURN i ;
END ; 
$$ LANGUAGE plpgsql;

Execute 'fibonacci' : SELECT fibonacci(9);
/~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~/

/~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~/
CREATE OR REPLACE FUNCTION for_loop_through_query(n INTEGER DEFAULT 10) 
RETURNS VOID AS $$
DECLARE
    rec RECORD;
BEGIN
    FOR rec IN SELECT name 
        FROM city 
	ORDER BY name
        LIMIT n 
    LOOP 
 RAISE NOTICE '%', rec.name;
    END LOOP;
END;
$$ LANGUAGE plpgsql;

Execute for_loop_through_query : SELECT for_loop_through_query();
/~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~/

/~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~/


Declaring a Trigger
Let’s get about learning the nuts and bolts. There are many options available in the general DDL syntax for declaring a trigger, and it would take a significant time to treat all possible permutations, so for the sake of brevity we’ll talk about only a minimally-required subset of them in examples that follow using this abridged syntax:

CREATE TRIGGER name { BEFORE | AFTER | INSTEAD OF } { event [ OR ... ] }
    ON table_name
    FOR EACH ROW EXECUTE PROCEDURE function_name()
 
where event can be one of:
 
    INSERT
    UPDATE [ OF column_name [, ... ] ]
    DELETE
    TRUNCATE


 CREATE TABLE person (
    login_name varchar(9) not null primary key,
    display_name text
);


EXAMPLE 0 - Data Validation

CREATE OR REPLACE FUNCTION person_bit()
    RETURNS TRIGGER
    SET SCHEMA 'public'
    LANGUAGE plpgsql
    AS $$
    BEGIN
    IF LENGTH(NEW.login_name) = 0 THEN
        RAISE EXCEPTION 'Login name must not be empty.';
    END IF;
 
    IF POSITION(' ' IN NEW.login_name) > 0 THEN
        RAISE EXCEPTION 'Login name must not include white space.';
    END IF;
    RETURN NEW;
    END;
    $$;

CREATE TRIGGER person_bit 
    BEFORE INSERT ON person
    FOR EACH ROW EXECUTE PROCEDURE person_bit();

INSERT INTO person VALUES ('', 'Felonious Erroneous');
INSERT INTO person VALUES ('space man', 'Major Tom');


/* Alternative */

ALTER TABLE person 
    ADD CONSTRAINT PERSON_LOGIN_NAME_NON_NULL 
    CHECK (LENGTH(login_name) > 0);
 
ALTER TABLE person 
    ADD CONSTRAINT person_login_name_no_space 
    CHECK (POSITION(' ' IN login_name) = 0);

*/

EXAMPLE 1 - Audit Logging

CREATE TABLE person_audit (
    login_name varchar(9) not null,
    display_name text,
    operation varchar,
    effective_at timestamp not null default now(),
    userid name not null default session_user
);

DROP TRIGGER person_bit ON person;

CREATE OR REPLACE FUNCTION person_bit()
    RETURNS TRIGGER LANGUAGE plpgsql AS $$
    BEGIN
    IF LENGTH(NEW.login_name) = 0 THEN
        RAISE EXCEPTION 'Login name must not be empty.';
    END IF;
    IF POSITION(' ' IN NEW.login_name) > 0 THEN
        RAISE EXCEPTION 'Login name must not include white space.';
    END IF;
    -- New code to record audits
    INSERT INTO person_audit (login_name, display_name, operation) 
        VALUES (NEW.login_name, NEW.display_name, TG_OP);
    RETURN NEW;
    END; $$;

CREATE OR REPLACE FUNCTION person_bdt()
    RETURNS TRIGGER LANGUAGE plpgsql AS $$
    BEGIN
    -- Record deletion in audit table
    INSERT INTO person_audit (login_name, display_name, operation) 
      VALUES (OLD.login_name, OLD.display_name, TG_OP);
    RETURN OLD;
    END;
    $$;

CREATE TRIGGER person_biut 
    BEFORE INSERT OR UPDATE ON person
    FOR EACH ROW EXECUTE PROCEDURE person_bit();    
         
CREATE TRIGGER person_bdt 
    BEFORE DELETE ON person
    FOR EACH ROW EXECUTE PROCEDURE person_bdt();

INSERT INTO person VALUES ('dfunny', 'Doug Funny');
INSERT INTO person VALUES ('pmayo', 'Patti Mayonnaise');
SELECT * FROM person;
SELECT * FROM person_audit;
UPDATE person SET display_name = 'Doug Yancey Funny' WHERE login_name = 'dfunny';
SELECT * FROM person;
SELECT * FROM person_audit ORDER BY effective_at;
DELETE FROM person WHERE login_name = 'pmayo';
SELECT * FROM person;
SELECT * FROM person_audit ORDER BY effective_at;

EXAMPLE 2 - Derived Values

ALTER TABLE person ADD COLUMN abstract TEXT;
ALTER TABLE person ADD COLUMN ts_abstract TSVECTOR;
 
ALTER TABLE person_audit ADD COLUMN abstract TEXT;

CREATE OR REPLACE FUNCTION person_bit()
    RETURNS TRIGGER LANGUAGE plpgsql AS $$
    BEGIN
    IF LENGTH(NEW.login_name) = 0 THEN
        RAISE EXCEPTION 'Login name must not be empty.';
    END IF;
    IF POSITION(' ' IN NEW.login_name) > 0 THEN
        RAISE EXCEPTION 'Login name must not include white space.';
    END IF;
    -- Modified audit code to include text abstract
    INSERT INTO person_audit (login_name, display_name, operation, abstract) 
        VALUES (NEW.login_name, NEW.display_name, TG_OP, NEW.abstract);
    -- New code to reduce text to text-search vector
    SELECT to_tsvector(NEW.abstract) INTO NEW.ts_abstract;
    RETURN NEW;
    END;
    $$;

 UPDATE person SET abstract = 'Doug is depicted as an introverted, quiet, insecure and gullible 11 (later 12) year old boy who wants to fit in with the crowd.' WHERE login_name = 'dfunny';

 SELECT login_name, ts_abstract  FROM person;


EXAMPLE 4 - Summary Values

CREATE TABLE transaction (
    login_name character varying(9) NOT NULL,
    post_date date,
    description character varying,
    debit money,
    credit money,
    FOREIGN KEY (login_name) REFERENCES person (login_name)
);

ALTER TABLE person ADD COLUMN balance MONEY DEFAULT 0;
 
CREATE FUNCTION transaction_bit() RETURNS trigger
    LANGUAGE plpgsql AS $$ DECLARE newbalance money;
    BEGIN
    -- Update person account balance
    UPDATE person 
        SET balance = 
            balance + 
            COALESCE(NEW.debit, 0::money) - 
            COALESCE(NEW.credit, 0::money) 
        WHERE login_name = NEW.login_name
                RETURNING balance INTO newbalance;
    -- Data validation
    IF COALESCE(NEW.debit, 0::money) < 0::money THEN
        RAISE EXCEPTION 'Debit value must be non-negative';
    END IF;
    IF COALESCE(NEW.credit, 0::money) < 0::money THEN
        RAISE EXCEPTION 'Credit value must be non-negative';
    END IF;
    IF newbalance < 0::money THEN
        RAISE EXCEPTION 'Insufficient funds: %', NEW;
    END IF;
    RETURN NEW;
    END;
    $$;
 
 
 
CREATE TRIGGER transaction_bit 
      BEFORE INSERT ON transaction
      FOR EACH ROW EXECUTE PROCEDURE transaction_bit();


SELECT login_name, balance FROM person WHERE login_name = 'dfunny';
INSERT INTO transaction (login_name, post_date, description, credit, debit) VALUES ('dfunny', '2018-01-11', 'ACH CREDIT FROM: FINANCE AND ACCO ALLOTMENT : Direct Deposit', NULL, '$2,000.00');
SELECT login_name, balance FROM person WHERE login_name = 'dfunny';
INSERT INTO transaction (login_name, post_date, description, credit, debit) VALUES ('dfunny', '2018-01-17', 'FOR:BGE PAYMENT ACH Withdrawal', '$2780.52', NULL);
SELECT login_name, balance FROM person WHERE login_name = 'dfunny';
INSERT INTO transaction (login_name, post_date, description, credit, debit) VALUES ('dfunny', '2018-01-17', 'FOR:BGE PAYMENT ACH Withdrawal', '$278.52', NULL);
SELECT login_name, balance FROM person WHERE login_name = 'dfunny';
INSERT INTO transaction (login_name, post_date, description, credit, debit) VALUES ('dfunny', '2018-01-23', 'FOR: ANNE ARUNDEL ONLINE PMT ACH Withdrawal', '$35.29', NULL);
SELECT login_name, balance FROM person WHERE login_name = 'dfunny';



/~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~/

/~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~/
CREATE OR REPLACE FUNCTION get_country_city (dis TEXT)
   RETURNS TABLE (
	 country TEXT,
	 city TEXT
	)  AS $$
   DECLARE
    rec_country RECORD;
    cur_country CURSOR(dis TEXT) FOR SELECT country.name as countryname, city.name as cityname
					    FROM country inner join city on (country.code=city.countrycode)
					    WHERE city.district=dis;
	   BEGIN
	   -- Open the cursor
	   OPEN cur_country(dis);
	   LOOP
	   -- fetch row
		FETCH cur_country INTO rec_country;
		-- exit when no more row to fetch
		EXIT WHEN NOT FOUND;
		-- build the output
		        country := rec_country.countryname ; 
			 city := rec_country.cityname ; 
				RETURN NEXT;
	   END LOOP;
	   -- Close the cursor
	   CLOSE cur_country;
	END; $$
LANGUAGE plpgsql;


SELECT * FROM get_country_city('Brest');
/~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~/